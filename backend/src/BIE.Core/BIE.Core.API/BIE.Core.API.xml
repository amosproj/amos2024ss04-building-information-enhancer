<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BIE.Core.API</name>
    </assembly>
    <members>
        <member name="M:BIE.Core.API.ApiHelper.GetBoundingBoxFromParameters(BIE.Core.API.Controllers.DatasetController.QueryParameters)">
            <summary>
            Get the Bounding Box from the query parameters.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.GetPolygonFromBoundingBox(BieMetadata.BoundingBox)">
            <summary>
            get the WKT (well known text) polygon from a bounding box.
            </summary>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.GetPolygonFromQueryParameters(BIE.Core.API.Controllers.DatasetController.QueryParameters)">
            <summary>
            Get the polygon of the bounding box given in the queryparameters
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.BoxIntersection(BieMetadata.BoundingBox,BieMetadata.BoundingBox)">
            <summary>
            returns true if two boxes are intersecting.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.FromTableWhereIntersectsPolygon(System.String,System.String)">
            <summary>
            Gets the Query to filter a table via polygon Intersection. Presents the FROM part of a Query.
            </summary>
            <param name="tableName">the name of the table to filter</param>
            <param name="polygon">the polygon string</param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.GetCoordinatesFromPolygon(System.String)">
            <summary>
            Gets the float coordinates from the polygon string
            </summary>
            <param name="polygon"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.ApiHelper.StringToFloat(System.String)">
            <summary>
            Casts a string to a Float using the en-US culture.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.Controllers.DatasetController">
            <summary>
            Batch controller
            </summary>
        </member>
        <member name="M:BIE.Core.API.Controllers.DatasetController.GetDatasetViewportData(BIE.Core.API.Controllers.DatasetController.QueryParameters)">
            <summary>
            Get viewport data. so Data for a specific rectangle returned as featurecollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.DatasetController.LoadLocationData(BIE.Core.API.Controllers.LocationDataRequest)">
            <summary>
            Loads the location data for the given point or polygon.
            </summary>
            <param name="request">Contains the current dataset id and the list of coordinates. 
            In case of a single point a list with a single element.</param>
            <returns>Data for the specified point/polygon as a list of key/values.</returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.DatasetController.GetHausumringeClusteredData(BIE.Core.API.Controllers.DatasetController.QueryParameters)">
            <summary>
            Get a record
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.Controllers.InfrastructureController">
            <summary>
            Batch controller
            </summary>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.#ctor(Parbat.Core.Services.InfrastructureService)">
            <summary>
            Constructor 
            </summary>
            <param name="service">IRepositoryFactory</param>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.Get(System.Int64)">
            <summary>
            Get a record
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.List">
            <summary>
            List all batch
            </summary>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.Update(BIE.Core.DataObjects.Infrastructure)">
            <summary>
            Update a batch
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.Create(BIE.Core.DataObjects.Infrastructure)">
            <summary>
            Create 
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.Controllers.InfrastructureController.Delete(System.Int64)">
            <summary>
            Delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.DatasetHandlers.CsvDatasetHandler">
            <summary>
            Handler for the CSV Datatype. Assumes a single table. Uses a Geometry row named
            </summary>
        </member>
        <member name="M:BIE.Core.API.DatasetHandlers.CsvDatasetHandler.#ctor(BieMetadata.MetadataObject)">
            <summary>
            Handler for the CSV Datatype. Assumes a single table. Uses a Geometry row named
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:BIE.Core.API.DatasetHandlers.ShapeDatasetHandler.#ctor(BieMetadata.MetadataObject)">
            <summary>
            Handler for the Shape Dataset Type. Scans multiple Tables and combines results.
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:BIE.Core.API.DatasetHandlers.ShapeDatasetHandler.GetDataInsideArea(BieMetadata.BoundingBox)">
            <summary>
            Get the data inside a bounding box
            </summary>
            <param name="dataset"></param>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:BIE.Core.API.DatasetHandlers.ShapeDatasetHandler.GetFeatureFromRow(System.Collections.Generic.Dictionary{System.String,System.String},BieMetadata.MetadataObject.TableData)">
            <summary>
            Get the GeoJson Feature Object corresponding to the object
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.Global">
            <summary>
            Global constatns
            </summary>
        </member>
        <member name="F:BIE.Core.API.Global.API_VER">
            <summary>
            Route Constant variable
             API Version
            </summary>
        </member>
        <member name="F:BIE.Core.API.Global.API_CONTROLLER">
            <summary>
            Default Route prefix
            </summary>
        </member>
        <member name="T:BIE.Core.API.MaintainCorsExtension">
            <summary>
            To handle CORS issue in case of exception
            </summary>
        </member>
        <member name="M:BIE.Core.API.MaintainCorsExtension.MaintainCorsHeadersOnError(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Method to be called in Startup 
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.Program">
            <summary>
            Main Program
            </summary>
        </member>
        <member name="M:BIE.Core.API.Program.Main(System.String[])">
            <summary>
            Main method
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:BIE.Core.API.Program.CreateHostBuilder(System.String[])">
            <summary>
            startup building
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:BIE.Core.API.Startup">
            <summary>
            Startup class
            </summary>
        </member>
        <member name="M:BIE.Core.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:BIE.Core.API.Startup.Configuration">
            <summary>
            /Configuration property
            </summary>
        </member>
        <member name="M:BIE.Core.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:BIE.Core.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
